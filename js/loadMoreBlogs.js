var blogCont=document.getElementById("devBlogs"),load=document.getElementById("loadMore"),body=document.getElementById("wrapper");function reload_expander(e){var t="<script src=js/"+e+"><\/script>";document.querySelector('script[src*="expand.js"]').remove(),body.innerHTML+=t}const loadEl="<div id='loadMore' onclick='loadBl(); remove();'>Click to load more blogs</div>",gail="<section class='exSectionCont'><div id='exSection'> <img src='images/blogs/gaim/isle.jpg' class='coverImage' alt='Rough Sketch of our Island early in Development' /><div class='exP'><h2>Level Design</h2> My primary duty in developing FISKUR has been the design and construction of the level environment in Unity. With a major mechanic requiring the player to fish, the map needed a lot of space to access the water. Additionally, enemies rise from the ocean and attack from the shore, and slowly make their way towards a point we’d been calling “The Altar”, requiring beaches over sheer cliffs. The Altar also served as a way to obtain weapon upgrades through spending the player’s collected fish. Because of this relative importance to every other potential landmark, the Altar needed to be visible across many sightlines and quickly discovered by the player. With these parameters in mind, I assembled this early, top-down sketch. <img src='images/blogs/gaim/isleSketch.png' class='coverImage' alt='Sketch of our Island layout early on' /> With the Altar being the most important landmark, it sits along the central line of the island. Some of our concept paintings, such as Lindsay’s early interpretation (right), envisioned the altar located on a rocky outcropping amidst a stream. Inspired by her design, I incorporated the backdrop of rising cliffs and a rocky outcrop in my sketch (above). I split this schematic into 3 distinct tiers of elevation, represented by a pink color grade with lighter colors correlating to higher ground. This was a way to quickly create a more dynamic environment, allowing players to move in multiple dimensions as they navigated the map, and using the presence of high ground to guide players towards the Altar at the base of the cliffs. However, to most effectively convey my vision of the layout, I developed a whitebox map- an untextured, quickly and easily modifiable approximation of the game level.<img src='images/blogs/gaim/isle.jpg' class='coverImage' alt='Whitebox Version 1 of our island' /> The first iteration of the map, which I’d so lovingly named ‘Whitebox V1’, is mostly a 1:1 recreation of the concept drawing. The island is split in two, with a watery lagoon running through the center to provide the player with additional waterfront access. The east and west beaches are long and mostly featureless, sloping upwards at the far ends to connect with the Altar platform. The only distinguishing landmarks between the two are a small overlook in the west, a “rocky shoals”-like structure in the east, and a scattering of vertical dropdowns. The Altar itself is completely out in the open at this point, providing the player with means to survey the entire island. A ‘Pride Rock’-like structure juts from the cliff, providing both an additional vantage point and a landmark which can be located from below. In early testing, however, this iteration failed to deliver on the promise of a natural, untamed landscape. The map was far too flat and open, and while it was easy enough to find your way around, it didn’t feel interesting to explore at all. It became clear that the next version of the map would need to be more focused on the player experience with more concise routes through a more interesting landscape. <img src='images/blogs/gaim/isle1.jpg' class='coverImage' alt='Whitebox Version 2 of our island: More details and geometry being added in' /> The second iteration of the whitebox (V2) resolved many of the weaknesses of V1. The relative flatness of V1 meant that the player could always see most of the island and could walk to any point without much difficulty. When designing a space intended to invoke a sense of exploration and interest, this simply would not do! To make the island more interesting to explore, without increasing its size, my solution was to limit the walkable space on the island: pulling up vertical cliffs to reduce the open space at points furthest from the altar, pulling the player’s focus towards the center of the island. At the same time, additional paths were created to navigate around these new obstacles. Short, direct paths could still be found closest to the Altar, but the new cliffs featured paths navigating around them, with slopes accessing the high ground adjacent to them. This high ground also received more attention, leading players towards the altar cliff with bridges over the recessed central space. There new routes, we hoped, would not only make the island more fun to explore, but also provide new challenges when engaging in combat. The player now had options to ambush enemies from above, or circle around to meet them from behind. With most of the architectural flaws patched, we began to consider the aesthetics of the Altar space. For being a place of divine power, it seemed to be lacking something; we determined that some sort of ruined structure be a compelling signifier. Placeholder cubes were set up around the Altar to suggest the forms of Nordic runestones and collapsed walls. A small cave or overhang was added above the eastern connector, supplying that side of the island with an aesthetic landmark comparable to the tree bridge in the west. By the end of this development phase, V2 was almost unrecognizable compared to V1. <img src='images/blogs/gaim/isle2.jpg' class='coverImage' alt='Version 3 of our island: Complete with environmental detail, POI's identified on island' /> By the third iteration of the whitebox (V3), I’d come to a new realization regarding the various routes around the island. A flaw we’d noted in V2 was that many of the new routes felt purposeless. The eastern bridge route had lower access points that were incredibly close to each other, leaving a space that felt like it should be a shortcut between two points feeling more like a closed loop. Amongst other flaws, I was prompted to overhaul most of the island’s terrain geometry. I determined that pulling the exits of each route further apart would increase the percentage of island that was relevant to gameplay, requiring the player to plan their journey more carefully. The southern cliffs became larger and taller, pulling away from the lagoon gateway rocks, opening a shortcut from the furthest beaches to the inside of the island. The path to the rock bridge in the east split into two routes, one by the rock arch and one further up the beach. The simple hills leading to the high ground in the west became two narrow passages, one alongside the cliff and one The stairs connecting the lagoon to the western side were split in the middle, becoming two sets of stairs which connected to a poolside shortcut, which improved the player’s movement options within the lagoon. <img src='images/blogs/gaim/isle3.jpg' class='coverImage' alt='Most complete version of island with lighting, full environmental detail, and complex pathing' /> The Altar’s aesthetics were also overhauled. After researching and designing various structures to encompass it - a ruined church, a Stonehenge-like circle – we determined that these options felt too ‘civilized’, or rather, that they implied a more civilization on the island than we wanted. We opted instead for a stone alcove set into the side of the cliffs which towered above the map. To solve the aforementioned problem of the area feeling too open, I opted to extend the cavern structure across the entire Altar area, creating a sort of refuge space. This space felt both safe during the daylight hours, reinforcing its location as a “home base” of sorts, and claustrophobic at night, encouraging the player to venture outside to combat the horde of fish monsters. As a bonus, the space feels especially tight when monsters have invaded it, encouraging a fight response from play testers! With the map’s layout mostly finalized, my focus has switched from iteration to improving the island’s geometry. The next couple months will see the grey primitives and basic Unity terrain replaced with more versatile shapes through the power of the Unity plugins ProBuilder and PolyBrush. These addons improve Unity with geometric meshes that can be constructed like buildings and molded like clay. With these tools at our disposal, we will be able to create cleaner structures and more realistic terrain, which should mean cleaner geometry and easier navigation for the player, and a cleaner file structure for our developers.</div><p class='hinty'>Click to read more!</p></div> </section>",andf="<section class='exSectionCont'><div id='exSection'> <img src='images/blogs/andf/movecode.png' class='coverImage' alt='Some of the code put into the movement scripts themselves, showing off the structure of it' /><div class='exP'><h2> Failing to be lazy with<br /> Camera & Movement programming</h2> We decided early on within our project that we would need a robust over the shoulder camera, that would be capable of tracking player movement throughout the environment, and do so gracefully, and in a way that keeps the player immersed within our world. At the start, the player could only move in the 4 cardinal directions and had to hold a button down to move the camera separately. Over time, we evolved this so that the camera moved with the mouse/thumb stick movement, and the player could begin to move diagonally as well. There were some issues, such as<ul id='devList'><li>• the camera being able to clip through the world</li><li>• player strafing looking and feeling wonky</li><li> • animations not quite matching up to the correct directions</li></ul> <img src='images/blogs/andf/camclip.png' class='coverImage' alt='Example' /> Eventually, I simplified camera and movement by<ul id='devList'><li>• cutting out the separate strafing animations</li><li> • dynamically checking whether anything was between the player and camera to keep it in bounds</li><li> • completely refactoring the movement script all helped to finally bring together the final system</li></ul> The movement itself is an example of Michael’s research into movement in modern games, often citing games like Skyrim that have good player movement that make the player really step into the shoes of the player that they created, and we wanted to try and simulate the same. We began with a slow acceleration and a fast deceleration to truly make the player feel like they have total control as they navigate around our island. Initially, I scripted every single state the player could be in: forward, backward, left, right, running, jumping, and so forth. Refactoring the script down, I learned to trust in Unity’s engine to handle most of this and simplified it down to just checking each axis value and deriving the player’s proper movement from such.</div><p class='hinty'>Click to read more!</p></div> </section>",justb="<section class='exSectionCont'><div id='exSection'> <img src='images/blogs/jusb/GantCh.png' class='coverImage' alt='Picture of the overall gant chart for Fiskur' /><div class='exP'><h2>Managing FISKR’s timeline</h2> A major challenge of any project is ensuring that everything is completed on a schedule. The task of creating a game is monumental and has many different working parts in the process; it is vital that everything be carefully organized. One of the most important internal documents is the master burndown chart which helps us organize the 34-week project. This chart was generated in Microsoft Project, a powerful management tool capable of setting up tasks in a timeline fashion. In the figure above, the left-hand side shows a series of nested tasks that need to be completed. Each entry includes a duration, start and finish dates, a predecessor, and an assigned resource. With this information, the software generates a Gant chart, a visual graph-like system that gives a great overview of how the project fits together. By using estimated durations and linking tasks together, it is easy to gain an overall view of the project’s timeline. The largest flaw with this software is its difficulty to get exact times for the completion of certain tasks. In order to counteract this, our team uses a sprint-oriented burndown chart. <img src='images/blogs/jusb/Brk.png' class='coverImage' alt='Picture of one of our sprint progression charts' /><h4>Figure 2 Burndown chart</h4> This smaller, color-coded chart helps our team assign tasks in smaller periods of time. These charts help us keep detailed tasks per sprint and allow the team an overall view of the project. Between Microsoft Project and Excel, we can organize most of the items/tasks that need to be accomplished. But we also rely heavily on Slack, a software communication tool, to keep people on the team informed about what we are doing. <img src='images/blogs/jusb/Slack.png' class='coverImage' alt='Picture of some of our Slack communications' /><h4>Figure 3 Snippet of the Slack communication software</h4> Lastly, with Microsoft Teams for file sharing and storage, we manage to keep our project well-organized in real time. <img src='images/blogs/jusb/Real.jpg' class='coverImage' alt='Figure 4 A section of the team working on ideation' /><h4>Figure 4 A section of the team working on ideation</h4></div><p class='hinty'>Click to read more!</p></div> </section>",linds="<section class='exSectionCont'><div id='exSection'> <img src='images/blogs/lins/lvl3.jpg' class='coverImage' alt='Our boss snake's concept art' /><div class='exP'><h2>The Culture and Tales of FISKUR’s Island</h2> The roots of FISKUR trace back to Norse mythology. The fish, clothing, weather, and layout of the island are tied to Scandinavian islands before the coming of Christianity in the 11th century. Due to this, the gods and deities involved in the game are of Norse origin and Viking religion. For example, Njord is the Norse god of the sea and seafaring people which is why his role determines the player’s weapon upgrades in return for fish. Many enemies’ concepts created in the development process were based on Norse figures such as Jormungand and Fenrir. They are both children of the trickster god Loki. However, one is a sea serpent large enough to wrap around the whole planet and the other is a wolf so strong and large that he had to be forever chained down by the gods. <img src='images/blogs/lins/lvl1.jpg' class='coverImage' alt='Concepts of some of our various enemies' /><h4>Enemy concept sketches, FISKUR.</h4> Another focus of Norse culture is the appearance and use of runes. The runic alphabet was used by the Germanic people, including Vikings and Scandinavians. Each individual rune functioned as both a letter and a symbol of a greater power from which the rune was given its name. As a result, the runes have spiritual connections, individual meanings based on those connections, and the ability to be used in a sequence to form a word. These runes are incorporated into the game through tattoos covering the Viking’s arms. <img src='images/blogs/lins/Runes.png' class='coverImage' alt='Runic inspiration for some of our etchings in game' /><h4>Elder Futhark runic alphabet.</h4></div><p class='hinty'>Click to read more!</p></div> </section>",araw="<section class='exSectionCont'><div id='exSection'> <img src='images/blogs/araw/img.png' class='coverImage' alt='Bodystorming Fiskurs fishing experience' /><div class='exP'><h2>Brainstorm with the Whole Body</h2><h3>Collaborative brainstorming</h3> Before a game can be fully realized by developers, everyone needs to be able to know what their teammates think that the game will look like. The multidisciplinary nature of game design means that each contributor will have a different vision and sometimes, everyone is headed in opposite directions. This is where implementing collaborative brainstorming methods can help. Collaborative brainstorming methods help the team generate ideas together in real-time and work out possible communication issues before problems develop. Another benefit is in helping prevent wasted resources by ensuring all energy is devoted to a unified vision and not various tangents with radically different goals. These methods allow everyone on the development team to voice their perspectives and design ideas with the goal of finding a unified vision. <img src='images/blogs/araw/img2.png' class='coverImage' alt='Bodystorming and enjoying the sun before things get cold!' /> One of the brainstorming methods our team used is bodystorming, which is really a combination of methods that involve the whole body such as role-playing, improvisation, kit-bashing, and others. The method can be used at various points in the initial stages of game design to assemble a low-fidelity (low-fi) prototype or to test a more refined version of the low-fi prototype with the end-user (players). <img src='images/blogs/araw/img3.jpg' class='coverImage' alt='Some more bodystorming of our altar interactions' /><h3>Our bodystorming</h3> Once we all agreed on a general idea of what the game should be, we gathered up various props and prototyping materials and picked a location outside to serve as our gamespace. Each member of the team role-played as a component of the game such as the game’s user interface (UI), player avatar, enemies, and other systems. Through this method, we were able to understand what each team member thought the various systems, mechanics, and assets should look like and how each might interact. We were also able to explore how we thought our players might interact with the experience and find opportunities to change the design to better communicate the game to our users. <img src='images/blogs/araw/img4.png' class='coverImage' alt='Bodystorming the camera system' /> We held two internal bodystorming sessions and by the end, we were able to establish a core gameplay loop and construct a cohesive prototype. Later, we repeated the bodystorming process as a playtest session and invited a couple of students from outside the team to play. This time, we added placeholder sound effects and music via cellphones to convey the ambiance we hope to present in the final game. <img src='images/blogs/araw/img5.png' class='coverImage' alt='Bodystorming with other teams, casing an example of basic combat' /> The bodystorming sessions gave us answers to many questions we had about the core gameplay loop and how the systems and mechanics might work with one another. Everything we learned has informed the development of the game and serves as a sort of keystone to ensure we are all on the same page. We look forward to being able to share everything we learned through our game once it is finished.</div><p class='hinty'>Click to read more!</p></div> </section>",days="<section class='exSectionCont'><div id='exSection'> <img src='images/blogs/days/Sounds.PNG' class='coverImage' alt='Some of the sound WAV files' /><div class='exP'><h2>The Sounds of FISKUR: Sound Effects</h2> The sound work for FISKUR is divided into two categories: sound effects and music. The development of the game is at the point where most of the mechanics have been implemented into the game, but still need playtesting, balancing and polishing. Preliminary sound effects have been implemented for the player character and monster. The current sounds were sourced from Freesound.<h3>The Player Character</h3> <img src='images/blogs/days/Day1.jpg' class='coverImage' alt='Player Character with some sun behind him' /> The player character will not actually speak in the game; as such, various types of grunts are needed for the actions performed by the player character. There needs to be grunts for light attacks, heavy attacks, receiving damage, and a death cry. The grunts for light attacks have the feeling that some effort was put into the attack, but not so much effort that the person would be tired after a few swings. Heavy attacks use a grunt that would imply a much more strenuous swing of the weapon is being used. Taking damage only uses one sound effect at this point in development. The damage sound effect didn’t need to be drawn out. A simple “oof” or “argh” sound gets the point cross. The dying noise is drawn out a bit longer than just a “oof” or “argh” to indicate a clear “game over” signal to the player. Different terrains suggest specific sound effects for walking and running: rock, grass, and sand. For rock, the sound of walking on gravel was chosen because it had a real “earthy” quality. Second, for grass, the sound of walking through was chosen because it sounded natural. Lastly, for sand, the sound of footsteps on the sand was chosen. The tricky part about choosing this sound effect was that it could not have the sound of the ocean in it because the ocean and footsteps will play during different times. The ocean will always be playing while the footsteps will only play when walking. All sound effects enhance the natural quality of the animation. The weapons also needed sound effects for attack. For the weapons, the sound effects need to be short and to the point. An attack combo consists of three swings of the weapon. A quick “fwip” noise works for the current prototype (mid-project) but future versions of the game will require some more. Implementation of elemental effects to weapons are being considered: electricity sparking, thunder clapping, water freezing, fire crackling could all enhance the game feel. As the player progress through the game and upgrades their weapon, more sound effects will be acquired.<img src='images/blogs/days/Sounds2.PNG' class='coverImage' alt='Some more of the sound files being considered for the game' /><h3>The Monsters</h3> While the player character and monsters have sound effects, the game is still a work in progress. Moving forward, sound effects for the menu, such as a noise for confirmation of menu options and other UX must be added. It will take some time, but the sound work for FISKUR will significantly enhance the player experience in future versions and playtests. <img src='images/blogs/days/en.png' class='coverImage' alt='Our Grunt enemy model' /><h3>The Next Step</h3> While the player character and monsters have sound effects, the game is still a work in progress. Moving forward, sound effects for the menu, such as a noise for confirmation of menu options and other UX must be added. It will take some time, but the sound work for FISKUR will significantly enhance the player experience in future versions and playtests.</div><p class='hinty'>Click to read more!</p></div> </section>",micl2="<section class='exSectionCont'><div id='exSection'><img src='images/blogs/micl/animWin.jpg' class='coverImage' alt='Animation spider web window' /><div class='exP'><h2>Putting Things Together</h2><h3>Implementing Animations and Combat Systems</h3> When night falls, the player must use their combat skills against the enemies that inhabit the island. The combat is realized through animations,systems and programming. One of the features found in Unity is the animator window. This window allows you to create, view, and modify animator controller assets that allow the player to move or even swing a weapon.The Animator window has two main sections: the main layout area and the layers and parameters pane. You can use the layout area to create, arrange and connect states in your Animator Controller. This allows the controller to know which animations to play based on each state. For example, the player character transitions from an idle animation to a walking animation when the player moves. The left-hand pane allows you to create, view, and edit the Animator Controller Parameters. These are variables you define that trigger certain conditions for each state that the controller chooses to play. <img src='images/blogs/micl/attckPt.png' class='coverImage' alt='Unity Inspector tab of the players attack pt on the axe' />The weapons held by the player each have an attack point that is inactive by default to avoid collision with enemies when not attacking. This attack point features a script that allows you to modify the radius and damage amount caused when colliding with an enemy. <img src='images/blogs/micl/attckPtScr.jpg' class='coverImage' alt='Script tab of the players attack pt on the axe' />While the weapon’s attack point stays inactive, there is a script called the CharacterAnimationDelegate that makes it active when an event in the attack animation occurs.<img src='images/blogs/micl/animWindow.png' class='coverImage' alt='image of all the differente vents associated with the weapon attack animation' />In the Animation window, events are added at certain frames. In the example above, the player's light attack features six events that turn the attack point on and off 3 times dealing damage when colliding with the enemy. As you can see, the combat system balances many parts to function together.</div><p class='hinty'>Click to read more!</p></div></section>",macn="<section class='exSectionCont'><div id='exSection'><img src='images/blogs/maln/mSketch.PNG' class='coverImage' alt='Sketches of Fiskur's grunt model' /><div class='exP'><h2>Creating a Stylized Grunt Monster</h2>The Grunt is frog-and-tadpole-inspired with two legs, a tail, and threatening teeth. For our game, Fiskur, we decided three tiers of enemies would provide a satisfying amount of variation, scope and progression. Then, to better distinguish the three tiers of monsters, we determined there would be a hierarchy of limbs beginning with two and adding two with each rising rank. As we began ideating on Scandinavian island-based water monsters, a fish and amphibian theme naturally developed.To go in-depth with the design choices, we aim to have our assets stylized, and an important part of stylizing characters is exaggerating proportions. With this introductory creature certain areas were enlarged to add more personality and lightheartedness. Having muscular eyebrows and an underbite exemplified a menacing, dim-witted creature. Interpretation of frog anatomy lead to protruding muscle ridges on its back, splaying its lower leg and feet, as well as varying the toe proportion from shortest to longest with the longest on the outside.<img src='images/blogs/maln/mModel.PNG' class='coverImage' alt='Model of our enemy grunt' />Orderly ideation and iteration were possible with the basis of a grunt role, amphibian theme, and style guide. Moving forward, personality will be important for animating. Perhaps some method acting will be valuable.<img src='images/blogs/maln/mAnim.PNG' class='coverImage' alt='Some of the rig of the enemy grunt and a shot of it mid animation' /></div><p class='hinty'>Click to read more!</p></div></section>",aud2="<section class='exSectionCont'><div id='exSection'><img src='images/blogs/audg/mocJ.jpg' class='coverImage' alt='Audrey and Justin working together on mocap animations' /><div class='exP'><h2>Man on the Move</h2><h3>How the team made our Viking come to life</h3>So, the Viking design and modeling is done, now what? A lot of time and effort was invested on making our character an authentic Viking, now we want to make him move like one. There are many ways to approach animation, one of which is by using motion capture. We are fortunate enough to have a Vicon motion capture setup in our capstone lab.. Our producer, Justin Bryant, is of similar stature to our character and thus an appropriate actor who also knows the importance of each action relative to gameplay. To begin every recording session, we calibrate the space and the model (who is wearing specifically placed markers for the system to recognize). Once the system is up ready to start recording, we tackle our list of animations: walking, running, idle, fishing, interaction, and many more. With one person at the computer managing the different recordings, another helps guide the actor through the animations and directs them on how the movements need to be to meet both aesthetic and practical needs. Once recorded, they aren’t ready to be put in the game right away, though. The system isn’t perfect and sometimes some recordings will need some cleanup by hand using animation layers in Maya. Motion capture is an amazing tool that makes an animator’s job a lot easier (and fun). While it isn’t always perfect, it was an effective choice for our studio, and it produced life-like results for our man on the move. <img src='images/blogs/audg/mocP.jpg' class='halfImage' alt='Justin posing epicly at the start of the mocap anim recording' /><img src='images/blogs/audg/mocT.jpg' class='halfImage' alt='Lindsey watching the data for teh mocap session being recorded' /></div><p class='hinty'>Click to read more!</p></div></section>",andf2="<section class='exSectionCont'><div id='exSection'><img src='images/blogs/andf/altarAfter.png' class='coverImage' alt='Our Altar after figuring out the lighting that we want' /><div class='exP'><h2>Lighting the way in FISKUR</h2>Getting the lighting to convey a bright, calm day, and slowly fade into a dark, unsettling night is what is critical to our fish-by-day-fight-by-night game cycle. We’ve researched complex shaders, different post processing effects, and how the engine itself should draw everything. These variables must be balanced for aesthetics and performance.<img src='images/blogs/andf/beachBefore.png' class='halfImage' alt='Beach before with...early island and early island concepts' /><img src='images/blogs/andf/beachAfter.png' class='halfImage' alt='Beach with most recent island and lighting' />As such, we have emphasized post processing, as the visual effects created with this method can give our game environment a distinct look, while also performing well on computers across the board. Unity engine allows for a worldwide post processing effect to be done, but also allows for visual effects to override this and cover certain areas of our map, such as when going through an area dense in woods.<img src='images/blogs/andf/caveBefore.png' class='halfImage' alt='Cave walk up to altar before' /><img src='images/blogs/andf/caveAfter.png' class='halfImage' alt='Cave walk up currently' />It has also allowed us to emphasize certain objects, such as the lighting (and the effects) we have around our altar, and how the glow from such is always present in the background as our Viking player character explores the island.<img src='images/blogs/andf/altarBefore.png' class='coverImage' alt='Our Altar before the lighting overhaul' />By doing a simple switch in Unity tools from Gamma to Linear lighting we can see our lighting improve drastically too, at the cost of some performance (which will be tweaked as we continue forward.) Linear lighting by itself is not necessarily bad, but appears to be much harsher, as colors will go from light to dark with little gradation of value in between. Swapping our lighting to Gamma, however, stretches out these in-betweens and can be used for mixing colors in an environment together, which will be important foremost during the night, as our fog fades in and gives a slight tint to everything in the world. </div><p class='hinty'>Click to read more!</p></div></section>",macn2="<section class='exSectionCont'><div id='exSection'><img src='images/blogs/maln/chomp.jpg' class='coverImage' alt='Narrative sketch of our snek chomping at player' /><div class='exP'><h2>Narrative Devices in FISKUR</h2>Many video games take a cinematic approach to convey story with cutscenes. Where other games will use narrative devices within the game world such as audio logs and manuscripts to add to the world’s lore. Our goal is the latter, to share a narrative within the game without removing the player from the medium. By placing narrative beats within the game environment, the player is given agency in how they learn about the past of this island and how they can improve their situation. Paintings on fallen Vikings’ shields depict their owner’s recent experiences so the player may learn from other’s attempts to survive the perils of this cursed island. . By analyzing a shield found near a skeleton, the player could learn about the monsters they fought or how they imbued their weapon with power to defend themselves. Anthropologists think that the warriors of the Nordic culture painted on their shields; perhaps they did this to imbue them with power, to show social status, or represent momentous occasions of their past. In choosing this narrative device we hope to maintain a grounded experience with practical mechanics even within our stylized world.<img src='images/blogs/maln/fish.jpg' class='halfImage' alt='Player fishing sketch' /><img src='images/blogs/maln/paunch.jpg' class='halfImage' alt='Sketch of our player entering combat with our grunts' /><img src='images/blogs/maln/chill.jpg' class='halfImage' alt='Sketch of our character chilling (being frozen) with our snake' /></div><p class='hinty'>Click to read more!</p></div></section>",jus2="<section class='exSectionCont'><div id='exSection'><img src='images/blogs/jusb/finalMenu.png' class='coverImage' alt='Final look of our altar UI, without clunky buttons crowding player's screen' /><div class='exP'><h2>FISKUR’s User Interface Timeline</h2>Designing and implementing UI has been an challenge during the course of the project. One of the primary hurdles was designing UI that supported game feel on a standard gaming controller. I started to test UI for the project by using the simple, built-in Unity UI manager. <img src='images/blogs/jusb/menu1.png' class='coverImage' alt='Early example of how our UI looked for exchanging and upgrading' />Designing and implementing UI has been an challenge during the course of the project. One of the primary hurdles was designing UI that supported game feel on a standard gaming controller. I started to test UI for the project by using the simple, built-in Unity UI manager.This simple UI created a solid baseline to work with and allowed some level of interaction. It was at this point I looked heavily into how the menus were going to interact with the player character‘s actions. During playtesting, the team found players did not enjoy the early versions of fishing. However, the playtest gave the designers the opportunity to understand what was missing from the interaction. When players were asked, “what do you enjoy about fishing?”, the answers gave the team the idea to celebrate the player’s accomplishment of catching a fish. A prototype of an updated iteration that included celebratory feedback was created in Adobe XD. If you have a controller hooked up to your computer, you can try out the prototype yourself here.<img src='images/blogs/jusb/menuCode.png' class='coverImage' alt='Example of some of the code found early on for interacting with the altar' /><h4>Figure 2 Variable Instantiation for Menus</h4>After certain gameplay elements had been completed it was time to work in our controller support for the project. This is where the first big issue with our simple UI came into play. Unity does not natively support a controller for its UI system. My first major chunk of work was fully designing a system for which the controller would work with the menus. This involved a lot of special indexing handled by a controller input script. This section of code kept track of where the controller should be “pointing” in the on-screen UI.<img src='images/blogs/jusb/controlCode.png' class='coverImage' alt='Showing off the pains of handling indices with controller and menus' /><h4>Figure 3 Snippet of code handling controller indices</h4>I made a lot of progress on this system. Interaction with the controller was happening, but I could not shake the feeling that the menus felt awkward to navigate. Thinking back to games I’ve played in the past, I decided to ditch the system I was using in favor of a custom designed one featuring a radial menu.<img src='images/blogs/jusb/radialM.png' class='coverImage' alt='Example of menu 2.0 using a radial circle' /><h4>Figure 4 Radial UI menu for controller</h4>This menu was an immediate improvement. The controller felt far more natural on this radial setup.After prototyping a few different variations on FISKUR’s menu systems, we decided to take a more hand-off approach. We did this by implementing a diegetic system that used the camera to guide the interactions of the player.<img src='images/blogs/jusb/finalMenu.png' class='coverImage' alt='Final Menu used for altar interaction' /><h4>Figure 5 Diegetic UI at work</h4>This system felt a more natural because buttons were less commonly breaking immersion, however, diegetic UI is tricky to implement and requires that the designer know a great deal about how people act. Although this is the final UI system in FISKUR, it may have been more suited to a traditional UI scheme.</div><p class='hinty'>Click to read more!</p></div></section>",gail2="<section class='exSectionCont'><div id='exSection'> <img src='images/blogs/gaim/fisher.jpg' class='coverImage' alt='Early concept of our character, the fisher before being changed to a viking warrior' /><div class='exP'><h2>World Building in Fiskur</h2><h3>Designing the Island World of Fiskur</h3><h4>The Concept of Fiskur</h4><p> Weeks into our first semester of capstone, our team was still struggling to settle on a single game concept. Our team was split 50/50 between two pitched concepts- a cartoony roguelike and a fantastical puzzle platformer. Rather than make dilute either pitch’s concept, we opted to take the daring third option- creating a new pitch, together, on a whim. What was initially imagined as a treasure hunting pirate game quickly spun into something iconic as threw new ideas into the mix- what if the player could find treasure maps inside fish? What if they were shipwrecked and stranded on a deserted island? What if we followed a Viking theme over a pirate one? What if the player had to fight the fish? In that instant, the core concept of Fiskur was born- a game where you play a fisherman by day, and a hardened warrior by night, defending yourself from scores of fish monsters using power gathered from fishing activities during the day.</p><p> Our artists quickly began drawing up concepts for the game we were simply referring to as ‘Fishing Game’. We chose to design the game with stylized visuals after discussing existing games with similar features to ours. One caught our eye in particular- Rare’s Sea of Thieves. The game’s style, with its emphasis on silhouette, bright colors, and subtle textures, provided an inspiration for our earliest concept art.</p> <img src='images/blogs/gaim/seathieves.jpg' class='coverImage' alt='A screenshot from Sea of Thieves, showcasing some of the design elements that inspired our team.' /><h4>A screenshot from Sea of Thieves, showcasing some of the design elements that inspired our team.</h4><p> We began tossing around various ideas for the actual setting of the game. We knew by this point that we wanted a Viking-inspired theme, but toyed around with a variety of character concepts with designs ranging from old to young characters, and ancient to more modern settings.</p><h4>Art below by Audrey Groneck</h4> <img src='images/blogs/gaim/viking.png' class='coverImage' alt='Concept of how our viking started, fit, and buff' /> <img src='images/blogs/gaim/andVik.png' class='coverImage' alt='Early concept of viking being sort of genderless' /> <img src='images/blogs/gaim/ladyVik.png' class='coverImage' alt='Early concept of our viking warrior being female' /><h4>Art below by Lindsay Seichter</h4> <img src='images/blogs/gaim/oldVik.jpg' class='coverImage' alt='Old lady viking gonna whoop ya' /><h4>Art below by Gail Machalek</h4> <img src='images/blogs/gaim/fisher.jpg' class='coverImage' alt='Concept of our main character being a fisher rather than a warrior' /><h4>Art below by Malachi Nidersson</h4> <img src='images/blogs/gaim/mscVik.jpg' class='coverImage' alt='Snippet of some of the hairstyles, tattoos, and clothing we concepted for our viking' /><p></p>After we evaluated all the designs, noting the elements we liked the best, Audrey created the concept for what would become our official character design. A faceless protagonist embodying a the classical image of a buff bearded Viking, but with a more humble demeanor fitting of a heroic fisherman, our nameless hero fit perfectly as the face of the game.</p><h4>Art below by Audrey Groneck</h4> <img src='images/blogs/audg/conceptColor.png' class='coverImage' alt='Final concept of our bear backed viking' /><h3> Explaining the Magic of Fiskur</h3><p> Now that we had a more concrete vision of our game’s theme, our team began to explore elements of the game’s narrative. We had a character who was shipwrecked on an island, so naturally we figured that their primary motivation would be to find a way off the island. So, how would fishing and fighting monsters help our bearskin-wearing hero get home? The answer that came to us involved the assistance of a Norse god- the patron of fishing and the sea, Njord.   <img src='images/blogs/gaim/altar.jpg' class='coverImage'alt='Design of our altar, that influenced a lot of our game' /><h4>An early concept for Njord's cauldron. Gail Machalek</h4> Njord’s presence in the game would provide an explanation for the player’s ability to upgrade their weapon at the cost of fish. In our game, Njord would accept fish as a sort of sacrifice or offering, and in return, bless the player and their weapon with new powers. How would the player offer the fish? Turned off of our initial concepts of a sacrificial altar, which felt too barbaric and not nearly Viking enough, we found a perfect fit in our research on Viking traditions: Blót, a huge feast held in tribute to the gods, often involved boiling meat in a large cauldron. The mental image of tossing fish into a cauldron felt like a perfect fit for our game and target rating, and the design process moved forward with these ideas at their core. An early version of our gameplay saw the player defending Njord from monsters as part of the main narrative. Njord would offer to help the player escape the island if they could fight off an onslaught of fishy minions sent by the mythical ‘world serpent’, Jörmungandr. Jörmungandr is a representation of fate in Norse mythology, and this alongside his aquatic nature made him the perfect fit for an antagonistic force. In game, Jörmungandr appears as just his massive head rising above the waves, striking at the player as he summons grunts from the depths of the ocean. His elemental attacks embody his nature as the “Midgard serpent”, using the natural power of Earth’s weather to inflict damage. The lightning he calls is representative of the storms in the sea that lead to shipwrecks, the ice he creates represents the chilling weather of northern Scandinavia, and the fire represents the blaze of a forge or wildfire. Together, they make Jörmungandr a fearsome embodiment of the power of nature itself. If the player upgrades their weapon enough, they can harness a few of these elemental forces for themselves, striking back at the monsters with a flaming or electric blade.</p><h3>Narrative in Fiskur</h3><p>In the final game, Njord’s narrative presence was greatly diminished in the interest of scope, only remaining in the form of a few visual hints. In his place, painted shields hidden around the island reveal how the fisherman came to be stranded on the island, the ritual of offering fish, and the key to defeating the world serpent. A few of the shields are shown below, depicting the fisherman’s fateful journey to the island. The first shield depicts him fishing peacefully, and in the second, a powerful storm surrounds him. Suddenly, Jörmungandr rears his head above the water and lets out a mighty roar, diving below the surface once again. Players who take the time to explore the island can decipher the rest of the story by locating the remaining 16 shields.</p> <img src='images/blogs/gaim/shields.png' class='coverImage' alt='Some of the shields that tell the environmental story in FISKUR' /> When the player brings an end to the world serpent’s assault, the storm clears, and with the earned favor of Njord may leave the island and return home. The world of Fiskur is one of many interpretations of Norse mythology, and one we hope provides a fun experience for our players!</p></div><p class='hinty'>Click to read more!</p></div> </section>",gource="<section class='exSectionCont'><div id='exSection'> <img src='images/blogs/andf/gource.png' class='coverImage' alt='Final boss of FISKUR' /><div class='exP'><h2>Gource: Showing off our progress</h2><p> Gource is a wonderful too that allows developers to show off the history of their repo, and every commit, deletion, addition, and everything in their project. Above is an image of the end product for FISKUR, followed by a link to the Gource pages for all the Senior Capstone 2020 projects. I think I speak for us all, when I say seeing our entire history summarized in mere minutes like so is a bit...bittersweet to say the least. But it does a wonderful job of showing all the work we've put in to someone outside the project.<div id='link'><a href='https://vimeo.com/showcase/7137349'>https://vimeo.com/showcase/7137349</a></div></p></div><p class='hinty'>Click to read more!</p></div> </section>",linds2="<section class='exSectionCont'><div id='exSection'> <img src='images/blogs/lins/fSnake.jpg' class='coverImage' alt='Final boss of FISKUR' /><div class='exP'><h2>Creating a Force of Destruction: The World Serpent</h2><p id='border'>The design of the final boss, Jormungand, is a product of both function and style. The battle against him is the culmination of FISKUR’s day and night cycle of and it gives the player a goal to work towards in order to finish the game. According to Norse myth, the World Serpent is the child of the trickster god Loki and is said to be so large he could wrap around the earth. Typical imagery of him depicts the snake eating the end of his tail. Prophecies in Norse myth claimed that the releasing of his own tail would signal the end of the world.</p> <img src='images/blogs/lins/lvl3.jpg' class='halfImage' alt='Sketch of World Serpent' /> <img src='images/blogs/lins/fSnake.jpg' class='halfImage' alt='Finished model of World Serpant' /><h4>Left: Jormungand snake and alligator iteration, FISKUR. Right: Finished Jormungand model, detail shot, FISKUR. </h4><p id='border'> Jormungand’s model went through three initial iterations: one inspired by a Chinese dragon, one inspired by an axolotl, and one inspired by a deer. After adjustments in Maya and finer details added in ZBrush, Jormungand’s appearance comes across as ferocious while still fitting into the somewhat light-hearted, jaunty art style of the game. His form has significant emphasis on his horns, which are intended to look domineering while adding an elegant curve to his form when he is upright. The flaring scales shown on the initial model were taken out of the final version and instead replaced with marks from photoshopped alpha brushes in ZBrush. Ultimately, Jormungand is fierce, but not scary, as per our intended E10+ audience.</p> <img src='images/blogs/lins/snMdl.jpg' class='coverImage' alt='Rig of World Serpent before entering ZBrush on left, after zBrush and details added on right' /><h4>Left: Jormungand initial model, before Zbrush, FISKUR. Right: Jormungand model after ZBrush sculpting, FISKUR. </h4></div><p class='hinty'>Click to read more!</p></div>",aram2="<section class='exSectionCont'><div id='exSection'><img src='images/blogs/araw/MenuIdeation.png' class='coverImage' alt='Ideation on some of the menu's and examples of how they could look, or be formatted' /><div class='exP'><h2>User Experience Design (UXD) with Adobe XD</h2><h3>Introduction</h3> User Experience Design (UXD) is the application of user-centric principles and methods to solve design challenges focused on meeting the needs of the end user. UXD practiced in Game Design is a part of Games Research and User Experience (GRUX). The goal of GRUX is to conduct research and find the right design problems to give game designers robust data. Designers use this data to ensure video games are communicated to the player as intended and in a way that meets player’s needs. GRUX outcomes are manifested in every facet of a video game, including animation, audio, level design, code, user interface (UI), haptics, and more.UX designers use a variety of methods and tools during development. Many designers will use sketches, wireframes, low/high-fidelity prototypes and more throughout their process. Since player research is foundational in GRUX practice, UX designers value methods and tools that allow players to interact with the designs easily at all stages. For Cast Iron Games, Adobe XD proved to be a useful tool in realizing some functional interaction prototypes.<img src='images/blogs/araw/FishCaught.png' class='coverImage' alt='Early example of how catching a fish could appear' /><h3>Fishing</h3> During Fiskur’s daytime phase, players must catch fish to exchange for better equipment in preparation to defend themselves during the night. A complicating fishing interaction was undesirable as an overarching design goal for Fiskur was to keep the gameplay fast-paced. This meant the team had to understand what was compelling about fishing and distill the elements for an experience that fit the game’s pace.During playtesting, the team found players did not enjoy the early versions of fishing. However, the playtest gave the designers the opportunity to understand what was missing from the interaction. When players were asked, “what do you enjoy about fishing?”, the answers gave the team the idea to celebrate the player’s accomplishment of catching a fish. A prototype of an updated iteration that included celebratory feedback was created in Adobe XD. If you have a controller hooked up to your computer, you can try out the prototype yourself here.<div id='link'><a href='https://xd.adobe.com/view/49f9b8a0-232a-4551-441b-15d2b42d5265-3fc8/?fullscreen'>https://xd.adobe.com/view/49f9b8a0-232a-4551-441b-15d2b42d5265-3fc8/?fullscreen</a></div><img src='images/blogs/araw/Fishbelt.png' class='coverImage' alt='Early example of highlighting fish on player belt interaction' /><h3>Offering</h3> After players catch fish, the fish are offered in exchange for better equipment. The dev team was interested in minimal traditional UI elements and instead opted to display the player’s available fish and weapons on in-game avatar. To visualize the interaction and facilitate discussion, a prototype of the offering interaction was created in Adobe XD. The tool allowed for multiple iterations of the interaction to be made and tested without investing valuable time coding and re-coding. Both mouse and keyboard and controller inputs were able to be tested.  If you would like to see the prototype for yourself, you can visit this link. <div id='link'><a href='https://xd.adobe.com/view/ef0edf0a-735f-41e9-5d6d-c2c6ca837c68-993f/?fullscreen'>https://xd.adobe.com/view/ef0edf0a-735f-41e9-5d6d-c2c6ca837c68-993f/?fullscreen</a></div><img src='images/blogs/araw/WeaponsMenu.png' class='coverImage' alt='Example of how our weapon's menu complete with stats' /><h3>Menus</h3> A solution was needed for Fiskur’s in-game pause menu that provided the options players expected as well as quick reference to weapon stats and the control layout. With these needs in mind, a carousel style solution was proposed that would open to weapon stats by default when players pressed the menu button on controller or escape key on keyboard. The intent was for players to be able to preview the controller map and menu options to either side without using up valuable screen real estate. For the main menu, a design was proposed that included a looping gameplay trailer that would proceed to menu options once input was detected. Should you wish to try the Adobe XD prototype for yourself, it is live and accessible through this link.<div id='link'><a href='https://xd.adobe.com/view/37e58f30-eacc-4448-68a2-795cc60146cc-41d4/?fullscree'>https://xd.adobe.com/view/37e58f30-eacc-4448-68a2-795cc60146cc-41d4/?fullscree</a></div> </div><p class='hinty'>Click to read more!</p></div></section>",linds3="<section class='exSectionCont'><div id='exSection'> <img src='images/blogs/lins/tats.png' class='coverImage' alt='Example of the runic tattoos on our Viking' /><div class='exP'><h2>Research Into Viking Culture</h2><p>In the concept stage a lot of research went into the smaller details. Aspects such as the crashed boat on the shore, the tattoos on the Viking’s arm, the runes, the shields, and more had a lot of digging up behind them. When the Viking was in the texture stage, the Vikings’ tattoos had a lot of effort and detail put into them. His arms are made up of the images of snakes and descriptive, protective runes. We looked deeply into the runic language, the Elder Futhark, the meanings behind each rune, and the structure of the language itself. For instance, the strict lines in the letters is due to the materials the runes would be placed on. This was a language that had to be easily carved into surfaces and therefore lacked curves. A consistent color scheme of yellows and blues was found when researching what color clothes Vikings would tend to wear. This same palette carried on to the shields equipped by them and was therefore incorporated onto the shields littered across the island.<img src='images/blogs/lins/tats.png' class='coverImage' alt='Example of the runic tattoos on our Viking' /><h4> Finished Viking character, detail shot, FIKSUR.</h4> When coming up with one of the largest core mechanics of the game, we had to navigate the phrases and vocabulary we used. Initially, when speaking of the cauldron usage, we referred to the upgrading process as 'sacrificing' a fish. It soon became apparent to us that we had to change our language to keep it culturally appropriate and from there called it “Offering” a fish to the Norse god Njord. When it came to the Norse myth behind the island, we did not incorporate as much as we had researched. Initially Njord was guiding and instructing the Viking as he navigated the complexities of the island, however he did not end out playing a role or showing up in the game. Additional thought was cast to figures such as Loki’s three children: Jormungand, Fenrir, and Hel. Fenrir briefly showed up in our concept sketches, but its brother Jormungand made it into the final build of the game. While those figures are more popular, we also researched Ran, the personification of the sea. Though, she symbolizes death and violence because of the ocean and its wrath, so it was a thought that did not fit the age group our game is geared towards. <img src='images/blogs/lins/ship.png' class='coverImage' alt='Example of the crashed shipped washed up to shore '/><h4>Finished Boat model, FISKUR.</h4></p></div><p class='hinty'>Click to read more!</p></div></section>",linds4="<section class='exSectionCont'><div id='exSection'> <img src='images/blogs/lins/cntrl.png' class='coverImage' alt='Controls page that shows up in FISKUR' /><div class='exP'><h2>Guiding the Player: UI Assets</h2><p> User Interface assets serve the purpose of relaying specific information or instructions to the player. It can either tell the player that an interactive part of the game is located nearby or to press a specific button to trigger an action. FISKUR does not require many of these assets. In fact, it occasionally uses camera movement to guide the player through their options in place of implementing a UI asset.<img src='images/blogs/lins/btns.png' class='coverImage' alt='Buttons that the player interacts and see's throughout the game' /> <h4>A, B, X, and Y button UI Asstes, FISKUR.</h4><img src='images/blogs/lins/UI.png' class='coverImage' alt='UI Info background, pause bttn, and option selector in FISKUR' /><h4>Information Box, Pause button, and Option Selector, FISKUR.</h4>The assets that were created imitate the buttons A, B, X, and Y from the average gaming controller. Additionally, a Pause button, a Selector, and two major character health bars were implemented. Lastly, a controller sheet was created to show the player what buttons trigger which actions to aid this and create ease in the gameplay.<img src='images/blogs/lins/pHP.png' class='coverImage' alt='Player Health Asset' /><img src='images/blogs/lins/snakeUI.png' class='coverImage' alt='Snake UI that shows up' /><h4>Player and Snake Healthbars, FISKUR.</h4></p></div><p class='hinty'>Click to read more!</p></div></section>";function remove(){document.querySelectorAll('*[id^="loadMore"]')[0].remove()}function loadBl(){0==blogsToAdd?blogCont.innerHTML+=gail+andf:1==blogsToAdd?blogCont.innerHTML+=justb+linds:2==blogsToAdd?blogCont.innerHTML+=araw+days:3==blogsToAdd?blogCont.innerHTML+=micl2+macn:4==blogsToAdd?blogCont.innerHTML+=aud2+linds2:5==blogsToAdd?blogCont.innerHTML+=macn2+jus2:6==blogsToAdd?blogCont.innerHTML+=aram2+andf2:7==blogsToAdd?blogCont.innerHTML+=linds3+linds4:8==blogsToAdd&&(blogCont.innerHTML+=gail2+gource,remove()),blogCont.append(load),blogsToAdd++,reload_expander("expand.js"),getElements(),blogCont=document.getElementById("devBlogs")}